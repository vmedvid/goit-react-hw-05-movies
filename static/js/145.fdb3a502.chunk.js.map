{"version":3,"file":"static/js/145.fdb3a502.chunk.js","mappings":"mNAGaA,EAAOC,EAAAA,EAAAA,GAAH,yGAOJC,EAAWD,EAAAA,EAAAA,GAAH,0MAYRE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,mE,SClBVI,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACR,EAAD,UACGM,GACCA,EAAKG,KAAI,SAAAC,GAAI,OACX,SAACR,EAAD,WACE,SAACC,EAAD,CAAYQ,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAArD,SACGG,EAAKK,OAASL,EAAKM,QAFTN,EAAKE,GADT,KASpB,C,8HCjBYK,E,OAAShB,EAAAA,OAAH,gN,SCgDnB,EA5Ce,WACb,OAA4BiB,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KA2BA,OAzBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcH,EAAaI,IAAI,SACjCD,GACFE,EAAAA,EAAAA,IAASF,GACNG,MAAK,SAAAC,GACJT,EAAUS,EACX,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,KAEHX,EAAU,MACVG,EAAgB,CAAC,GAEpB,GAAE,CAACD,EAAcC,KAYhB,kBAAMW,SAVR,SAAkBC,GAChBA,EAAIC,iBAEJb,EAAgB,CACdc,MAAOF,EAAIG,cAAcC,SAASC,OAAOC,QAE3CN,EAAIG,cAAcI,OACnB,EAGC,WACE,4BACE,kBAAO1B,KAAK,SAAS2B,KAAK,YAE5B,SAAC1B,EAAD,CAAQ0B,KAAK,SAAb,qBACO,OAANxB,QAAM,IAANA,OAAA,EAAAA,EAAQyB,QAAS,IAChB,+BACE,SAACvC,EAAA,EAAD,CAAUC,KAAMa,QAKzB,C,+LC9CK0B,EAAW,gCACXC,EAAU,mCAKT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,EADpB,iBALZ,IAIN,cACCG,EADD,yBAIEA,EAASpB,KAAKqB,SAJhB,kEAOA,SAAevB,EAAtB,+CAAO,OAAP,oBAAO,WAAwBwB,GAAxB,uFACkBH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,8BACYM,EADZ,wCACmDL,EADnD,iBAZZ,IAWN,cACCG,EADD,yBAIEA,EAASpB,KAAKqB,SAJhB,kEAOA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACkBL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDQ,EADC,oBACkBP,IAFpC,cACCG,EADD,yBAIEA,EAASpB,MAJX,kEAOA,SAAeyB,EAAtB,+CAAO,OAAP,oBAAO,WAAuB1C,GAAvB,uFACkBoC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDjC,EADC,4BACqBkC,IAFvC,cACCG,EADD,yBAIEA,EAASpB,KAAK0B,MAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0B5C,GAA1B,uFACkBoC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDjC,EADC,4BACqBkC,IAFvC,cACCG,EADD,yBAIEA,EAASpB,KAAKqB,SAJhB,kE","sources":["components/FilmList/FilmList.styled.jsx","components/FilmList/FilmList.jsx","components/Button/Button.styled.jsx","pages/Movies.jsx","services/API.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\n  padding: 4px 10px;\n  width: fit-content;\n  border-radius: 5px;\n  :nth-of-type(odd) {\n    background-color:  #ecdbdb;\n  }\n  :hover {\n    background-color: #b92f2c;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, ListItem, StyledLink } from './FilmList.styled';\n\nexport const FilmList = ({ list }) => {\n  const location = useLocation();\n  //  console.log('location', location);\n  return (\n    <List>\n      {list &&\n        list.map(film => (\n          <ListItem key={film.id}>\n            <StyledLink to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title || film.name}\n            </StyledLink>\n          </ListItem>\n        ))}\n    </List>\n  );\n};\n\nFilmList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  margin: 10px;\n  padding: 4px 10px;\n  width: auto;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n\n  :hover {\n    color: #fff;\n    background-color: #b92f2c;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { getFilms } from 'services/API';\nimport { Button } from 'components/Button/Button.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const stringQuery = searchParams.get('query');\n    if (stringQuery) {\n      getFilms(stringQuery)\n        .then(data => {\n          setMovies(data);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } else {\n      setMovies(null);\n      setSearchParams({});\n    }\n  }, [searchParams, setSearchParams]);\n\n  function onSearch(evt) {\n    evt.preventDefault();\n    // console.log(evt.currentTarget.elements.search.value);\n    setSearchParams({\n      query: evt.currentTarget.elements.search.value,\n    });\n    evt.currentTarget.reset();\n  }\n\n  return (\n    <form onSubmit={onSearch}>\n      <label>\n        <input name=\"search\" type=\"text\" />\n      </label>\n      <Button type=\"submit\">Search</Button>\n      {movies?.length > 0 && (\n        <>\n          <FilmList list={movies} />\n        </>\n      )}\n    </form>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '12565cffb0d296cb69d2160e9bc02510';\nconst PAGE = 1;\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingFilms() {\n  const response = await axios.get(\n    `${BASE_URL}/trending/all/week?api_key=${API_KEY}&page=${PAGE}`\n  );\n  return response.data.results;\n}\n\nexport async function getFilms(request) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?query=${request}&include_adult=false&api_key=${API_KEY}&page=${PAGE}`\n  );\n  return response.data.results;\n}\n\nexport async function getMovieById(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function getCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n}\n\nexport async function getReviews(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n}\n"],"names":["List","styled","ListItem","StyledLink","Link","FilmList","list","location","useLocation","map","film","to","id","state","from","title","name","Button","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","useEffect","stringQuery","get","getFilms","then","data","catch","error","console","log","onSubmit","evt","preventDefault","query","currentTarget","elements","search","value","reset","type","length","BASE_URL","API_KEY","getTrendingFilms","axios","response","results","request","getMovieById","movieId","getCast","cast","getReviews"],"sourceRoot":""}